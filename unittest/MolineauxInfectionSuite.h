/*
 This file is part of OpenMalaria.
 
 Copyright (C) 2005-2014 Swiss Tropical and Public Health Institute
 Copyright (C) 2005-2014 Liverpool School Of Tropical Medicine
 
 OpenMalaria is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or (at
 your option) any later version.
 
 This program is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
*/

#ifndef Hmod_MolineauxInfectionSuite
#define Hmod_MolineauxInfectionSuite

#include <cxxtest/TestSuite.h>
#include "UnittestUtil.h"
#include "ExtraAsserts.h"
#include "WithinHost/Infection/MolineauxInfection.h"
#include "util/random.h"
#include <limits>
#include <fstream>
#include <iomanip>

using namespace OM::WithinHost;

//TODO: test option PARASITE_REPLICATION_GAMMA
//TODO: test option MOLINEAUX_PAIRWISE_SAMPLE
//TODO: test option FIRST_LOCAL_MAXIMUM_GAMMA
//TODO: test option MEAN_DURATION_GAMMA
//TODO: capture key stats, e.g. length, first local maximum, initial slope
class MolineauxInfectionSuite : public CxxTest::TestSuite
{
public:
    void setUp () {
        UnittestUtil::initTime(1);
        UnittestUtil::Infection_init_latentP_and_NaN ();
        UnittestUtil::MolineauxWHM_setup();
        scnXml::Parameters xmlParams(0,0,"");
        Parameters params(xmlParams);      // this is never used but we need to pass anyway
        MolineauxInfection::init(params);
        util::random::seed( 1095 );
        infection = new MolineauxInfection (0xFFFFFFFF);    // pkpdID (value) isn't important since we're not using drug model here
    }
    void tearDown () {
        delete infection;
        util::random::seed(0);  // make sure nothing else uses this seed/reports
    }
    
    static void readVector(std::vector<double>& vec, const char* file){
        ifstream istr(file);
        ETS_ASSERT( istr.is_open() );
        double val;
        while( istr >> val ){
            vec.push_back( val );
        }
        ETS_ASSERT( istr.eof() );
    }
    
    void testDensities(){
        // read densities: these were simply generated by this code, so the
        // only useful thing this test does is spot changes in output!
        vector<double> dens;
        readVector(dens,"MolineauxCirDens.txt");
        
        bool extinct = false;
        int iterations=0;
        SimTime now = sim::ts0();
        do{
            extinct = infection->update(1.0 /*no external immunity*/, now);
            SimTime age = now - infection->m_startDate - infection->latentP;
            if( age >= sim::zero() ){
                ETS_ASSERT_LESS_THAN( iterations, dens.size() );
                TS_ASSERT_APPROX( infection->getDensity(), dens[iterations] );
                iterations+=1;
            }
            now += sim::oneDay();
        }while(!extinct);
        TS_ASSERT_EQUALS( iterations, dens.size() );
    }
    
private:
    MolineauxInfection* infection;
};

#endif
