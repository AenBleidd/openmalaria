/*
 This file is part of OpenMalaria.
 
 Copyright (C) 2005-2014 Swiss Tropical and Public Health Institute
 Copyright (C) 2005-2014 Liverpool School Of Tropical Medicine
 
 OpenMalaria is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or (at
 your option) any later version.
 
 This program is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
*/

#ifndef Hmod_MolineauxInfectionSuite
#define Hmod_MolineauxInfectionSuite

#include <cxxtest/TestSuite.h>
#include "UnittestUtil.h"
#include "ExtraAsserts.h"
#include "WithinHost/Infection/MolineauxInfection.h"
#include "util/random.h"
#include <limits>
#include <fstream>
#include <iomanip>
#include <gsl/gsl_fit.h>
#include <gsl/gsl_statistics_double.h>

using namespace OM::WithinHost;

//TODO: test option PARASITE_REPLICATION_GAMMA
//TODO: test option MOLINEAUX_PAIRWISE_SAMPLE
//TODO: test option FIRST_LOCAL_MAXIMUM_GAMMA
//TODO: test option MEAN_DURATION_GAMMA
//TODO: capture key stats, e.g. length, first local maximum, initial slope
class MolineauxInfectionSuite : public CxxTest::TestSuite
{
public:
    void setUp () {
        UnittestUtil::initTime(1);
        UnittestUtil::Infection_init_latentP_and_NaN ();
        UnittestUtil::MolineauxWHM_setup();
        scnXml::Parameters xmlParams(0,0,"");
        Parameters params(xmlParams);      // this is never used but we need to pass anyway
        MolineauxInfection::init(params);
        util::random::seed( 1095 );
    }
    void tearDown () {
        util::random::seed(0);  // make sure nothing else uses this seed/reports
    }
    
    static void readVector(std::vector<double>& vec, const char* file){
        ifstream istr(file);
        ETS_ASSERT( istr.is_open() );
        double val;
        while( istr >> val ){
            vec.push_back( val );
        }
        ETS_ASSERT( istr.eof() );
    }
    
    void testDensities(){
        // read densities: these were simply generated by this code, so the
        // only useful thing this test does is spot changes in output!
        vector<double> dens;
        readVector(dens,"MolineauxCirDens.txt");
        
        // pkpdID (value) isn't important since we're not using drug model here:
        MolineauxInfection* infection = new MolineauxInfection (0xFFFFFFFF);
        bool extinct = false;
        size_t day=0;
        SimTime now = sim::ts0();
        do{
            extinct = infection->update(1.0 /*no external immunity*/, now);
            SimTime age = now - infection->m_startDate - infection->latentP;
            if( age >= sim::zero() ){
                ETS_ASSERT_LESS_THAN( day, dens.size() );
                TS_ASSERT_APPROX( infection->getDensity(), dens[day] );
                day += 1;
            }
            now += sim::oneDay();
        }while(!extinct);
        TS_ASSERT_EQUALS( day, dens.size() );
        delete infection;
    }
    
    void testKeyStats(){
        // This runs the infection several times, capturing some key statistics
        
        const size_t N = 1000;  // number of runs
        vector<MolInfStats> stats( N );
        
        vector<double> dens;    // time series of density
        for( size_t run = 0; run < N; ++run ){
            dens.resize( 0 );
            MolineauxInfection* infection = new MolineauxInfection (0xFFFFFFFF);
            SimTime now = sim::ts0();
            
            while( !infection->update(1.0 /*no external immunity*/, now) ){
                dens.push_back( infection->getDensity() );
                now += sim::oneDay();
            }
            delete infection;
            stats.push_back( MolInfStats( dens ) );
        }
        
        //TODO: print out stats, then do some tests based on these
    }

private:
    /** Calculates some key stats — these correspond to table 1 from the
     * Molineaux paper. Note that 'log' means 'log base 10'. */
    struct MolInfStats{
        double init_slope;      // slope of a linear regression line through
        // the log densities from first positive to first local maxima
        double log_1st_max;     // log of first local maxima
        int no_max;  // number of local maxima
        double slope_max;       // slope of linear regression line through log
        // densities of local maxima
        double GM_interv;       // geometric mean of intervals between
        // consecutive local maxima
        double SD_log;  // standard deviation of logs of intervals between
        // consecutive local maxima
        double prop_pos_1st;    // proportion of observations during the first
        // half of the interval between first and last positive days which are
        // positive
        double prop_pos_2nd;    // as above, but for second half
        double last_pos_day;    // difference between first and last positive days
        
        MolInfStats() :
            init_slope(numeric_limits<double>::quiet_NaN()),
            log_1st_max(numeric_limits<double>::quiet_NaN()),
            no_max(0),
            slope_max(numeric_limits<double>::quiet_NaN()),
            GM_interv(numeric_limits<double>::quiet_NaN()),
            SD_log(numeric_limits<double>::quiet_NaN()),
            prop_pos_1st(numeric_limits<double>::quiet_NaN()),
            prop_pos_2nd(numeric_limits<double>::quiet_NaN()),
            last_pos_day(numeric_limits<double>::quiet_NaN())
        {}
        /** Calculate stats */
        MolInfStats( const vector<double>& dens ){
            size_t first_pos = 0, last_pos = 0, posFirstLocalMax = 0;
            vector<double> maxima_t, maxima_ld;
            
            // Iterate with a step of two. Note that in one case we coincide
            // with density updates, in the other we get the interpolated
            // values.
            const size_t start = 0 /* 0 or 1 */, step = 2;
            for( size_t day = start; day < dens.size(); day += step ){
                if( first_pos == 0 && dens[day] > 0.0 ) first_pos = day;
                if( dens[day] > 0.0 ) last_pos = day;    // gets re-set until end of infection
                if( day >= step && day + step < dens.size() && dens[day] > dens[day-step] && dens[day] > dens[day+step] ){
                    //NOTE: assumes non-zero densities never exactly repeat
                    maxima_t.push_back( day );
                    maxima_ld.push_back( log10(dens[day]) );
                    if( posFirstLocalMax == 0 ){
                        posFirstLocalMax = day;
                    }
                }
            }
            last_pos_day = last_pos - first_pos;
            no_max = maxima_t.size();
            if( no_max == 0 ) return;  // no local maxima — shouldn't happen
            log_1st_max = maxima_ld[0];
            
            vector<double> init_times( (maxima_t[0] - first_pos)/step + 1, 0 );
            for( size_t i = 0; i < init_times.size(); i++ ){
                init_times[i] = step*i + first_pos;
            }
            
            double c0, c1, cov00, cov01, cov11, sum_sq;
            gsl_fit_linear( &init_times[0], sizeof(double), &dens[first_pos], step*sizeof(double), init_times.size(),
                            &c0, &c1, &cov00, &cov01, &cov11, &sum_sq );
            init_slope = c1;
            
            gsl_fit_linear( &maxima_t[0], sizeof(double), &maxima_ld[0], sizeof(double), maxima_t.size(),
                            &c0, &c1, &cov00, &cov01, &cov11, &sum_sq );
            slope_max = c1;
            
            double gm = 1.0;
            vector<double> log_intervals( maxima_t.size() - 1, 0 );
            for( size_t i = 1; i < maxima_t.size(); ++i ){
                double interval = maxima_t[i] - maxima_t[i-1];
                gm *= interval;
                log_intervals.push_back( log10(interval) );
            }
            GM_interv = pow(gm, 1.0 / (maxima_t.size() - 1));
            SD_log = gsl_stats_sd( log_intervals.data(), sizeof(double), log_intervals.size() );
            
            size_t mid_pos = (first_pos + last_pos) / 2;  // average: this rounds down
            mid_pos = start + ((mid_pos - start)/step)*step;    // must be in sync with step
            double pos_obs = 0.0;
            for( size_t day = first_pos; day <= mid_pos; day += step ){
                if( dens[day] > 0.0 ) pos_obs += 1.0;
            }
            prop_pos_1st = pos_obs / ((mid_pos - first_pos) / step + 1); // +1 because we count both first_pos and mid_pos
            pos_obs = 0.0;
            for( size_t day = mid_pos + step; day <= last_pos; day += step ){
                if( dens[day] > 0.0 ) pos_obs += 1.0;
            }
            prop_pos_2nd = pos_obs / ((last_pos - mid_pos) / step);      // we don't count at mid_pos
        };
    };
};

#endif
