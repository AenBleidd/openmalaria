<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Schema for OpenMalaria input documents
Copyright Â© 2005-2011 Swiss Tropical Institute and Liverpool School Of Tropical Medicine
Licence: GNU General Public Licence version 2 or later (see COPYING) -->
<xs:schema targetNamespace="http://openmalaria.org/schema/scenario_33"
           xmlns:om="http://openmalaria.org/schema/scenario_33"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="util.xsd"/>
  <xs:complexType name="monitoring">
    <xs:sequence>
      <xs:element name="continuous" minOccurs="0">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="om:OptionSet">
              <xs:attribute name="period" type="xs:int" use="required">
                <xs:annotation>
                  <xs:documentation>
                    Number of timesteps between reports.
                  </xs:documentation>
                  <xs:appinfo>units:Days;min:1;max:unbounded;name:Days between reports;</xs:appinfo>
                </xs:annotation>
              </xs:attribute>
              <xs:attribute name="duringInit" type="xs:boolean" use="optional">
                <xs:annotation>
                  <xs:documentation>
                    Also output during initialization. By default this is
                    disabled (only intervention-period data is output). This
                    should not be used for predictions, but can be useful for
                    model validation.
                    
                    In this mode, 'simulation time' is output as the first
                    column (in addition to 'timestep'), since 'timestep' is dis-
                    continuous across the start of the intervention period.
                  </xs:documentation>
                  <xs:appinfo>units:Days;min:1;max:unbounded;name:During initialization;</xs:appinfo>
                </xs:annotation>
              </xs:attribute>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SurveyOptions" type="om:OptionSet">
        <xs:annotation>
          <xs:documentation>
            List of all active survey options. See include/Survey.h for a list of
            supported outputs. Should also be on the wiki.
          </xs:documentation>
          <xs:appinfo>name:Name of quantity;</xs:appinfo>
        </xs:annotation>
      </xs:element>
      <xs:element name="surveys">
        <xs:annotation>
          <xs:documentation>
            List of survey times
          </xs:documentation>
          <xs:appinfo>units:list of elements;name:Survey times (time steps);</xs:appinfo>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="surveyTime" maxOccurs="unbounded">
              <xs:annotation>
                <xs:documentation>
                  Survey time; 0 means just before start of main sim and is a valid survey-point.
                  Reported data is either from a point-time survey (immediate data) or is collected 
                  over the previous year(data from previous timesteps-per-year period).
                  Simulation will end immediately after last survey is taken.
                </xs:documentation>
                <xs:appinfo>units:Number;min:0;name:Survey time;</xs:appinfo>
              </xs:annotation>
              <xs:complexType>
                <!--NOTE: this is an extension of xs:int for backwards compatibility.-->
                <xs:simpleContent>
                  <xs:extension base="xs:int">
                    <xs:attribute name="repeatStep" type="xs:int" use="optional"/>
                    <xs:attribute name="repeatEnd" type="xs:int" use="optional">
                      <xs:annotation>
                        <xs:documentation>
                          Either both repeatStep and repeatEnd should be present
                          or neither. If present, the survey is repeated every
                          repeatStep timesteps (i.e. at initial_step,
                          initial_step+repeatStep, ...), ending before repeatEnd
                          (no survey occurs on this step).
                        </xs:documentation>
                      </xs:annotation>
                    </xs:attribute>
                  </xs:extension>
                </xs:simpleContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="detectionLimit" type="xs:double" use="required">
            <xs:annotation>
              <xs:documentation>
                Limit above which a human's infection is reported as patent.
              </xs:documentation>
              <xs:appinfo>units:parasites/microlitre;min:0;name:Detection limit for parasitaemia;</xs:appinfo>
            </xs:annotation>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="ageGroup" type="om:ageGroup">
        <xs:annotation>
          <xs:documentation>
            List of age groups included in demography or surveys
          </xs:documentation>
          <xs:appinfo>name:Age groups;</xs:appinfo>
        </xs:annotation>
      </xs:element>
      <xs:element name="cohorts" minOccurs="0" type="om:Cohorts">
        <xs:annotation>
          <xs:documentation>
            Allows the configuration of multiple cohorts (output segregated
            according to membership within specific sub-populations).
            
            If this element is omitted, monitoring surveys cover the entire
            simulated human population.
            
            It does not affect the "continuous" outputs (these never take
            cohorts into account).
          </xs:documentation>
          <xs:appinfo>name:Cohorts;</xs:appinfo>
        </xs:annotation>
      </xs:element>
      <xs:element name="drugConcentration" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="cohort" type="xs:string" use="required"/>
          <xs:attribute name="file" type="xs:string" use="required"/>
          <xs:attribute name="drugCodes" type="xs:string" use="required"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>
          Name of monitoring data
        </xs:documentation>
        <xs:appinfo>name:Name of monitoring information;</xs:appinfo>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ageGroup">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="group" type="om:groupBounds" />
    </xs:sequence>
    <xs:attribute name="lowerbound" type="xs:double" use="required">
      <xs:annotation>
        <xs:documentation>
          Lower bound of age group
        </xs:documentation>
        <xs:appinfo>units:Years;min:0;max:100;name:lower bound of age group</xs:appinfo>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="groupBounds">
    <xs:attribute name="upperbound" type="xs:double" use="required">
      <xs:annotation>
        <xs:documentation>
          Upper bound of age group
        </xs:documentation>
        <xs:appinfo>units:Years;min:0;max:100;name:upper bound of age group</xs:appinfo>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="Cohorts">
    <xs:sequence>
      <xs:element name="subPop" maxOccurs="unbounded" type="om:CohortSubPop">
        <xs:annotation>
          <xs:documentation>
            Consider a certain sup-population a cohort, and segregate outputs
            according to membership. Where multiple sub-populations are listed,
            segregate output according to all combinations of membership: e.g.
            if sub-populations A and B are listed, there will be outputs for
            "member of A and B", "member of A but not B", "B but not A" and
            "not a member of A or B". Listing n sub-populations implies 2^n
            sets of outputs (each is further segregated by age groups, survey
            times and enabled output measures, which could lead to excessive
            program memory usage and output file size).
            
            To identify outputs, each sub-population has a power of two number
            as identifier (see "number" attribute). Each of the 2^n output sets
            is identified by a number: the output set is the output from humans
            who are members in some set of sub-populations (S1, S2, ...) and
            not members in some others (T1, T2, ...); the number identifying
            the set is the sum of the numbers identifying the sets S1, S2, etc.
            
            In the output file, the output set is identified by multiplying
            this number by 1000 then adding it to the age group column.
          </xs:documentation>
          <xs:appinfo>name:Sub-population;</xs:appinfo>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CohortSubPop">
    <xs:attribute name="id" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Textual identifier for the sub-population (i.e. for an intervention
          component, since sub-populations are defined as the hosts an
          intervention component is deployed to).
        </xs:documentation>
        <xs:appinfo>name:Sub-population identifier;</xs:appinfo>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="number" type="xs:integer" use="required">
      <xs:annotation>
        <xs:documentation>
          Number identifying a sub-population; used to define identifiers of
          output sets. This number must be a power of 2 (i.e. 1, 2, 4, 8, ...).
          See documentation of subPop element.
        </xs:documentation>
        <xs:appinfo>name:Sub-population number;units:dimensionless;min:1;max:2097152;</xs:appinfo>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
</xs:schema>
